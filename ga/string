import random
POPULATION_SIZE = 100 
GENES = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890, .-;:_!\"#%&/()=?@${[]}"  
TARGET = "Hello"  
MUTATION_RATE = 0.1  
GENERATIONS = 1000  
def generate_chromosome():
    return ''.join(random.choice(GENES) for _ in range(len(TARGET)))
def initialize_population():
    return [generate_chromosome() for _ in range(POPULATION_SIZE)]
def fitness(chromosome):
    return sum(1 for c1, c2 in zip(chromosome, TARGET) if c1 != c2)
def select_parents(population):
    return sorted(population, key=fitness)[:2]
def crossover(parent1, parent2):
    point = random.randint(1, len(parent1) - 1)  
    return parent1[:point] + parent2[point:]
def mutate(chromosome):
    chromosome = list(chromosome)
    for i in range(len(chromosome)):
        if random.random() < MUTATION_RATE:  
            chromosome[i] = random.choice(GENES)  
    return ''.join(chromosome)
def genetic_algorithm():
    population = initialize_population()  
    for generation in range(GENERATIONS):
        population = sorted(population, key=fitness)  
        best_match = population[0]  
        print(f"Generation {generation}: {best_match} | Fitness: {fitness(best_match)}")
        if best_match == TARGET:
            print("Target string reached!")
            break
        parents = select_parents(population)
        new_population = parents[:]  
        while len(new_population) < POPULATION_SIZE:
            child = crossover(parents[0], parents[1])  
            child = mutate(child)  # Mutate
            new_population.append(child)
        population = new_population  
    return best_match
best_solution = genetic_algorithm()
print("\nBest Solution Found:", best_solution)
