import random
knapsack_capacity = 50
item_weights = [10, 20, 30, 40, 50]
item_values = [60, 100, 120, 150, 200]
population_size = 50
generations = 100
mutation_rate = 0.1
def generate_chromosome():
    return [random.randint(0, 1) for _ in range(len(item_weights))]
def initialize_population():
    return [generate_chromosome() for _ in range(population_size)]
def fitness(chromosome):
    total_value = sum(c * v for c, v in zip(chromosome, item_values))
    total_weight = sum(c * w for c, w in zip(chromosome, item_weights))
    return total_value if total_weight <= knapsack_capacity else 0
def select_parents(population):
    return sorted(population, key=fitness, reverse=True)[:2]
def crossover(parent1, parent2):
    point1 = random.randint(1, len(parent1) - 1)
    point2 = random.randint(point1, len(parent1))  
    child1 = parent1[:point1] + parent2[point1:point2] + parent1[point2:]
    child2 = parent2[:point1] + parent1[point1:point2] + parent2[point2:]
    return child1, child2
def mutate(chromosome):
    index = random.randint(0, len(chromosome) - 1)
    chromosome[index] = 1 - chromosome[index]
def genetic_algorithm():
    population = initialize_population()
    for _ in range(generations):
        parents = select_parents(population)
        child1, child2 = crossover(parents[0], parents[1])
        if random.random() < mutation_rate:
            mutate(child1)
        if random.random() < mutation_rate:
            mutate(child2)
        population = [child1, child2] + population[:-2]
    best = max(population, key=fitness)
    return best, fitness(best)
best_solution, best_fitness = genetic_algorithm()
print("Best Solution:", best_solution)
print("Best Fitness:", best_fitness)
